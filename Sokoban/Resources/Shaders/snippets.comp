// Vertex layout (3, 3, 2, 3, 3)
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texture_coordinate;
layout (location = 3) in vec3 tangent;
layout (location = 4) in vec3 biTangent;

// Uniform Blocks
layout (std140, binding = 0) uniform CameraBlock { vec3 position; mat4 view, projection; } camera;

layout (std140, binding = 1) uniform LightBlock { vec3 position; mat4 color; } lights[];

out VsOut { int meat; } vs_out;

// Constants
#define PI (3.14159265358979323846)

// Gamma Correction
#define GAMMA (2.2)
vec3 apply_gamma_correction(vec3 color) { return pow(color, vec3(1.0 / GAMMA)); }

// 
uniform float exposure;

vec3 apply_exposure_tonemapping(vec3 color) { return vec3(1.0) -exp(-color * exposure); }
vec3 apply_hdr_tonemapping(vec3 color) { return color / (color + vec3(1.0)); }

// Math
float max_dot(vec3 first, vec3 second) { return max(dot(first, second), 0); }

// OpenGl 5 >>> OpenGl 4
